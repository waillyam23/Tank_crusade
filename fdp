#include <iostream>
#include <SDL.h>
#include <cstdlib>
using namespace std;

#define MAX 650
#define MIN 100
#define LMAX 1500


//fonction de la génération procédurale du terrain
void gpt(int x1, float y1)
{


   int x2;
   float y2;
   float yint;

  while(x1>0 && x1 <= LMAX)
    {
     x2=x1;
     y2=y1;
      yint= static_cast <float> (rand())/static_cast <float> (RAND_MAX/2) -1;
      if(y1+yint>MAX)
	yint=-1.*yint;
      if(y1+yint<MIN)
	yint=-1.*yint;
      y1=y1+yint;



    SDL_RenderDrawLine(renderer, x1, y1, x2, y2);

      std::cout<<"x : "<<x1<<" "<<"y : "<<y1<<std::endl;
      x1+=rand() % 100 + 30;
    }
}


int main( int argc,char *argv[])
{

// creation de la fenetre

SDL_Init(SDL_INIT_EVERYTHING);
//initialisation des variables utiles
SDL_Rect dest;
dest.x= 0;
dest.y=800-350;
dest.w=400;
dest.h=350;

SDL_Rect destb;
destb.x= 0;
destb.y=0;
destb.w=1500;
destb.h=800;

//infos texture :
Uint32 format;
int tw=171;
int th=35;






SDL_Renderer* renderer; //l'outil de rendu
SDL_Surface* surf;//la surface possedant l'image
SDL_Surface* background;
SDL_Texture* texture;//crée une texture
SDL_Texture* textureb;//crée une texture
SDL_Window *window;//la fenètre
//lancement de la fenètre
  window = SDL_CreateWindow("Tank_Crusade", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, 1500,800,SDL_WINDOW_RESIZABLE);
//initialisation du rendu et association avec la fenètre


	//test si la fenetre est créée
  if(window==NULL)
    {
      cout<<"BRUH";
    }


      //tous les test vont ici
surf = SDL_LoadBMP("sdl_icone.bmp");//charge l'image dans la surface
background = SDL_LoadBMP("background.bmp");

//mise a jour
  SDL_Event event;
  bool running=true;
  while(running)
    {
    //endroit ou on code tout
        dest.x=dest.x+1;
        if(dest.x>1500)
        dest.x=-400;
        renderer = SDL_CreateRenderer(window, -1, SDL_RENDERER_ACCELERATED);


        textureb = SDL_CreateTextureFromSurface(renderer,background);
        SDL_QueryTexture(textureb,&format,NULL,&tw,&th);
        SDL_RenderCopy(renderer,textureb,NULL,&destb);

        texture = SDL_CreateTextureFromSurface(renderer,surf);
        SDL_QueryTexture(texture,&format,NULL,&tw,&th);
        SDL_RenderCopy(renderer,texture,NULL,&dest);

        SDL_RenderPresent(renderer);
        SDL_RenderClear(renderer);
        SDL_DestroyRenderer(renderer);
        SDL_DestroyTexture(texture);


        SDL_Delay(5);




        while(SDL_PollEvent(&event))
            {
                if(event.type==SDL_QUIT)
                    {
                        running=false;
                        break;
                    }
            }
    }
//fermeture de la fenètre
SDL_DestroyWindow(window);
SDL_Quit();

  return 0;
}
